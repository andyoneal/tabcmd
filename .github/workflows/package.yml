name: Release-Executable

# Pyinstaller requires that executables for each OS are built on that OS
# This action is intended to build on each of the supported OS's: mac, windows, linux.
# and then upload all three files to a new release

## TODO: automate versioning, changelog, pypi publish
## (license: MIT) https://github.com/marketplace/actions/github-bump-tag

# reference material:
# https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions
# https://anshumanfauzdar.medium.com/using-github-actions-to-bundle-python-application-into-a-single-package-and-automatic-release-834bd42e0670


# TODO: actually plan when we want to trigger this job
#  - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
on:
  push:
    tags: release
    branches: jac/pyinstaller

jobs:

  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.head_commit.message }}
        release_name: Release ${{ github.event.head_commit.message }}
        draft: true # todo: change to false once action is tested
        prerelease: false
        
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  buildexe:
    name: Build executables and upload them to the existing release
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: >
                pyinstaller --clean --noconfirm tabcmd.spec && 
                cd dist/tabcmd && dir
            OUT_FILE_NAME: tabcmd.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
            

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[package]
    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value && ls && pwd

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/tabcmd/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}

  buildwheels:
    name: Build dist files for PyPi
    needs: createrelease
    runs-on: ubuntu
    steps:
      - uses: actions/checkout@master
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Build dist files
        run: python setup.py sdist --formats=gztar,zip

# This action assumes files exist in /dist unless told otherwise
# https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
# TODO: set up pypi tokens
# publish:
#    name: Publish a Python distribution to PyPI
#    needs: buildwheels
#    # uses: pypa/gh-action-pypi-publish@release/v1  # license BSD-2
#    with:
      # user: __token__
      # password: ${{ secrets.PYPI_API_TOKEN }}
#    run: echo ::todo publish to pypi
